#!/usr/bin/python

from easylambda import easyjava
from argparse import ArgumentParser, RawDescriptionHelpFormatter

if __name__=="__main__":
  parser = ArgumentParser(
    formatter_class=RawDescriptionHelpFormatter,
    description="easyjava: initialize and configure Java " +\
      "AWS Lambda functions quickly and easily."
  )
  subparsers = parser.add_subparsers(
      help='Add -h after subcommand for more detailed help.'
    )
  
  valid_aws_sdk_dependencies = easyjava.get_valid_aws_sdk_dependencies()

  #################
  # INIT_FUNCTION #
  #################
  # Create the AWS Lambda function.

  parser_init_function = subparsers.add_parser(
      'init-function',
      help='Create a Lambda function, using target jar.'
    )
  parser_init_function.add_argument(
      '--role',
      required=True,
      help='Lambda execution role.'
    )
  parser_init_function.add_argument(
      '--profile',
      help='Configuration profile (as defined in the shared\
            credentials file) for Lambda operations.'
    )
  parser_init_function.add_argument(
      '--region',
      help='Custom region for Lambda operations.'
    )
  parser_init_function.set_defaults(process=easyjava.init_function)

  ################
  # INIT_PROJECT #
  ################
  # Create the project directory with template POM and handler source.

  parser_init_project = subparsers.add_parser(
      'init-project',
      help='Create a project directory with template POM and handler class.'
    )
  parser_init_project.add_argument(
      '--project-name',
      help='Name of the project.',
      default='easylambda_demo'
    )

  # The default group-id and artifact-id match those in the template POM
  # distributed with easylambda.
  parser_init_project.add_argument(
      '--group-id',
      help='Used as package name.',
      default='com.example'
    )
  parser_init_project.add_argument(
      '--artifact-id',
      help='Used as jar name, and should be same as project name.',
      default='demo'
    )
  parser_init_project.add_argument(
      '--dependencies',
      help='A list of AWS SDK dependencies, e.g.\
             \'s3\', \'dynamodb\', \'kinesis\'.',
      nargs='*', 
      choices=valid_aws_sdk_dependencies,
      default=[]
    )
  parser_init_project.set_defaults(process=easyjava.init_project)

  #################################
  # UPDATE_FUNCTION_CONFIGURATION #
  #################################
  # Update properties of the function, e.g. memory-size.  

  parser_update_function_configuration = \
    subparsers.add_parser(
      'update-function-configuration', 
      help='Conveniently update several function parameters.\
          for more complete customization, use the AWS CLI.'
    )
  parser_update_function_configuration.add_argument(
      '--memory-size', 
      help='The function\'s memory and CPU, 0 to 3008.', 
      type=int
    )
  parser_update_function_configuration.add_argument(
      '--timeout',
      help='Function timeout, in seconds (0-300).',
      type=int
    )
  parser_update_function_configuration.add_argument(
      '--tracing-config',
      help='X-ray tracing option.',
      choices=['Active','PassThrough']
    )
  parser_update_function_configuration.add_argument(
      '--profile',
      help='Configuration profile (as defined in the shared\
            credentials file) for lambda operations.'
    )
  parser_update_function_configuration.add_argument(
      '--region',
      help='Custom region for lambda operations.'
    )
  parser_update_function_configuration.set_defaults(
      process=easyjava.update_function_configuration
    )

  ########################
  # UPDATE_FUNCTION_CODE #
  ########################
  # Rebuild jar (with mvn) and upload function code (with boto).
  
  parser_update_function_code = subparsers.add_parser(
      'update-function-code',
      help='Upload the latest jar (target/<artifactId>-SNAPSHOT-1.0.jar).'
    )
  parser_update_function_code.add_argument(
      '--profile',
      help='Configuration profile (as defined in the shared\
            credentials file) for Lambda operations.'
    )
  parser_update_function_code.add_argument(
      '--region',
      help='Custom region for lambda operations.'
    )
  parser_update_function_code.set_defaults(
      process=easyjava.update_function_code
    )


  ##################
  # UPDATE_PROJECT #
  ##################
  # Add AWS SDK dependencies

  parser_update_project = subparsers.add_parser(
      'update-project',
      help='Add new AWS SDK dependencies to the project.'
    )
  parser_update_project.add_argument(
      '--dependencies',
      help='A list of AWS SDK dependencies e.g.\
             \'s3\', \'dynamodb\', \'kinesis\'.',
      nargs='*',
      choices=valid_aws_sdk_dependencies
    )
  parser_update_project.set_defaults(
      process=easyjava.update_project
    )

  # Parse and execute command.

  args = parser.parse_args()
  args.process(args)
